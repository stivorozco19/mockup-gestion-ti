<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="c07bb8cd-0d8c-4e50-a1e9-abe08bca7482" activeEnvironment="Default" name="mockup-banco" resourceRoot="" soapui-version="5.7.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="d7fc3fc5-46d1-42c2-b7c9-1bc9bde8d334" port="8080" path="/" host="ST" name="REST MockService"><con:settings/><con:properties/><con:restMockAction name="sendUser" method="POST" resourcePath="/sendUser" id="5aaf0388-5581-42f6-8ff4-08512deba02e"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("usuario_demo") )
{
    // return the name of the response you want to dispatch
    return "sendUserResponse.json"
}else{
	return "sendUserResponse-fallo.json"
	}


/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="sendUserResponse.json" id="2dfba5fc-06fa-4369-85e6-9766eb05f0af" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{&#13;
    "imagen": "https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=436&amp;q=80",&#13;
    "frase": "animalito",&#13;
    "sessionid":"2313a2s4c54s"&#13;
}</con:responseContent></con:response><con:response name="sendUserResponse-fallo.json" id="0bd7a55b-da16-443e-9436-a85a74644887" httpResponseStatus="401" mediaType="application/json"><con:settings/><con:responseContent>{&#13;
    "error":"credencial inexistente",&#13;
    "mensaje":"usuario no encontrado"&#13;
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="initCaptcha" method="GET" resourcePath="/initCaptcha" id="648e8d2a-3fc8-4c53-9947-cabeb42a16ca"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="initCaptchaResponse.json" id="062d7af9-1ca2-4a13-88ab-3c2e8b5a5a2f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{&#13;
    "frase": "imagen test",&#13;
    "imagenes": [&#13;
        "https://i.pinimg.com/originals/92/1b/42/921b421e9bf354a834d17cbbd581b416.jpg",&#13;
        "https://www.geekmi.news/__export/1623534723688/sites/debate/img/2021/06/12/sasukemuere1.jpg_2102270887.jpg"&#13;
    ]&#13;
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="checkCaptcha" method="POST" resourcePath="/checkCaptcha" id="6e6ab425-ffee-4651-9908-665f43e5a00c"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath><![CDATA[def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("Escalera") && requestBody.contains("A1") && requestBody.contains("B1") && requestBody.contains("C1"))
{
    // return the name of the response you want to dispatch
    return "checkCaptchaResponse-true.json"
}else{
	return "checkCaptchaResponse-false.json"
	}


/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
]]></con:dispatchPath><con:response name="checkCaptchaResponse-true.json" id="3ba61d27-8a2e-4997-9f06-6fcc72ff6b04" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{&#13;
    "respuesta": true&#13;
}</con:responseContent></con:response><con:response name="checkCaptchaResponse-false.json" id="3456fe8c-98ea-468c-a506-cce950a3fd07" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{&#13;
    "respuesta": false&#13;
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="sendPassord" method="POST" resourcePath="/sendPassord" id="00b8777c-0ec7-49b2-9404-02a11f5f7fd1"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("clave correcta") &amp;&amp; requestBody.contains("1234abcd") )
{
    // return the name of the response you want to dispatch
    return "sendPasswordResponse-true.json"
}else{
	return "sendPasswordResponse-false.json"
	}


/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
</con:dispatchPath><con:response name="sendPasswordResponse-true.json" id="06621d29-270e-4fe1-ac27-40b128e0b890" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{&#13;
    "status-login":true&#13;
}</con:responseContent></con:response><con:response name="sendPasswordResponse-false.json" id="b0c696bd-e5ec-467b-bd62-a5ae07d67818" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{&#13;
    "status-login":false&#13;
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>